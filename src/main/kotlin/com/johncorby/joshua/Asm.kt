/**
 * handles writing and building assembly file
 */
package com.johncorby.joshua

import com.johncorby.joshua.AsmString.writePos
import java.io.FileWriter

lateinit var OUT_PATH: String
lateinit var OUT_STREAM: FileWriter

fun initAsm() {
    OUT_PATH = changeExt(IN_PATH, ".asm")
    OUT_STREAM = FileWriter(OUT_PATH)

    "; generated by compiler\n".writeAsm()
}

fun String.writeAsm() = OUT_STREAM.write(this)
fun AsmString.writeAsm() = OUT_STREAM.write(toString())

fun makeAsm() {
    AsmString.writeAsm()
    OUT_STREAM.close()

    // todo include as resource
    doCmd("./make.sh", OUT_PATH)
}

/**
 * line-based list of strings
 *
 * labels can be used to retrieve lines
 *
 * [writePos] can be changed to change where in the list a line is added
 */
object AsmString {
    private val lines: MutableList<String> = mutableListOf()
    val labels: MutableMap<String, Int> = mutableMapOf()
    /**
     * line index that's used for insertion
     */
    var writePos = 0

    fun add(line: String, pos: Int = writePos, label: String? = null) {
        lines.add(pos, line)
        writePos++
        if (label != null) labels[label] = pos
    }

    operator fun get(pos: Int) = lines[pos]
    operator fun set(pos: Int, line: String) = lines.set(pos, line)

    override fun toString() = lines.joinToString("\n")
}

fun String.toPos() = AsmString.labels[this]!!
